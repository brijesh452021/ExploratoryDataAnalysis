# -*- coding: utf-8 -*-
"""EDA_with_Logistic_Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MMXBdYJak-i2lLZMkbVpFD2-KyQ3zlVY
"""

ls

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

titanic_data=pd.read_csv("titanic_train.csv")
titanic_data.head()

titanic_data.isnull().sum()

sns.heatmap(titanic_data.isnull())

sns.countplot('Survived',data=titanic_data,hue='Sex')

sns.countplot('Survived',data=titanic_data,hue='Pclass')

sns.distplot(titanic_data['Age'],kde=False)

sns.boxplot(x='Survived',y='Age',data=titanic_data)

sns.boxplot(x='Sex',y='Age',data=titanic_data)

sns.boxplot(x="Pclass",y="Age",data=titanic_data)

def calculateAge(cols):
  Age=cols[0]
  Pclass=cols[1]
  if(pd.isnull(Age)):
    if(Pclass==1):
      Age=40
    elif(Pclass==2):
      Age=30
    else:
      Age=25
  return Age

titanic_data['Age']=titanic_data[['Age','Pclass']].apply(calculateAge,axis=1)

titanic_data['Age'].isnull().sum()

sns.heatmap(titanic_data.isnull())

titanic_data.dropna(inplace=True)

titanic_data.head()

embark=pd.get_dummies(titanic_data['Embarked'],drop_first=True)
sex=pd.get_dummies(titanic_data['Sex'],drop_first=True)

titanic_data=pd.concat([titanic_data,embark,sex],axis=1)
titanic_data.head()

titanic_data.drop(['Name','Sex','Ticket','Fare','Cabin'],axis=1,inplace=True)
titanic_data.head()

titanic_data['SibSp'].value_counts()

titanic_data['Parch'].value_counts()

SibSp=pd.get_dummies(titanic_data['SibSp'],drop_first=True)
Parch=pd.get_dummies(titanic_data['Parch'],drop_first=True)
titanic_data=pd.concat([titanic_data,SibSp,Parch],axis=1)
titanic_data.head()

titanic_data.drop(['SibSp','Parch','PassengerId'],axis=1,inplace=True)
titanic_data.head()

titanic_data.drop(['Embarked'],axis=1,inplace=True)

X=titanic_data.iloc[:,1:]
y=titanic_data.iloc[:,0]

X.head()

y.head()

from sklearn.model_selection import train_test_split
train_x,test_x,train_y,test_y=train_test_split(X,y,test_size=0.3,random_state=0)

from sklearn.linear_model import LogisticRegression
logreg=LogisticRegression()

logreg.fit(train_x,train_y)

predictions = logreg.predict(test_x)

from sklearn.metrics import confusion_matrix
accuracy=confusion_matrix(test_y,predictions)
accuracy

from sklearn.metrics import accuracy_score
accuracy=accuracy_score(test_y,predictions)
accuracy

from sklearn.metrics import classification_report
print(classification_report(test_y,predictions))